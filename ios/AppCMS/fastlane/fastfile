# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.41.0"

default_platform :ios

platform :ios do

    before_all do |options|

        ENV["SLACK_URL"]="https://hooks.slack.com/services/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"
        # ENV["SECOND_URL"]=options[:slackWebHookUrl].to_s
        ENV["USERNAME"]="Viewlift Build Automation Framework"
        ENV["MY_RPOGRESS"]="0"

    end

    desc "Runs all the tests"
    lane :test do
    scan
    end

    desc "Deploy a new version to the App Store- with custom"

    lane :iosMobileBuildCreation do |options|

        puts "*************************************************"
        puts options[:appname]
        puts options[:bundleIdentifier]
        puts options[:devTeamId]
        puts options[:buildId]
        puts options[:posturl]
        puts options[:username]
        puts options[:password]
        puts options[:baseResultPath]
        puts options[:scheme]
        puts options[:isAppOnStore]
        puts options[:appVersion]
        puts options[:platform]
        puts options[:ituneTeamId]
        puts options[:appIconPath]
        puts options[:myEmailId]
        puts options[:mySiteId]
        puts options[:myUploadUrl]
        puts options[:slackWebHookUrl]
        puts options[:myItunesUsername]

        puts "*************************************************"

        myBuildId=options[:buildId].to_s
        myPostUrl=options[:posturl].to_s
        mySlackUserName="Viewlift Build Automation Framework"

        puts myBuildId
        puts myPostUrl 

        ENV["DELIVER_USER"] = options[:username]
        ENV["DELIVER_PASSWORD"] = options[:password]

        slack_train_start(distance: 12)


        myslackMessageOne = options[:appname].to_s + " IOS BUILD LANE STARTED. BUILD-ID --> " + options[:buildId].to_s + ". APP-VERSION-NUMBER --> " + options[:appVersion].to_s + ". BUILD TRIGGERED BY -->" +  options[:myEmailId].to_s
        slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName)
        # slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName,mySlackURL:options[:slackWebHookUrl])

        slack_train()

        progress=48
        ENV["MY_RPOGRESS"]="48"

        slack_train()


        if options[:isAppOnStore] == "0"
              puts "App is Already Created"
        else
              puts "App is Not Already Created" 
              produce(
                      app_name:options[:appname],
                      language: 'English',
                      app_version: options[:appVersion],
                      sku: options[:skuName],
                      team_id:options[:devTeamId],
                      itc_team_id:options[:ituneTeamId],
                      app_identifier:options[:bundleIdentifier],
                      platform:options[:platform],
                      enable_services: {
                          associated_domains: "on",  
                      }
              )
        end


      myBuildVersion=0
      sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Cleaning the Project'" + " " + "48" + " " + "0"


      slack_train()


      ##Updating the Product Bundle Identifer.     
      puts options[:bundleIdentifier].to_s
      myBundleIdentifierValue="PRODUCT_BUNDLE_IDENTIFIER = "+ options[:bundleIdentifier].to_s + ";"
      path = "/Users/fastlane/Desktop/fastlane-qa/ios/AppCMS/AppCMS.xcodeproj/project.pbxproj"
      UI.message("Updating product bundle identifier (foo) for the given project '#{path}'")
      p = File.read(path)
      p.gsub!(/PRODUCT_BUNDLE_IDENTIFIER = .*;/, myBundleIdentifierValue)
      File.write(path, p)
      UI.success("Successfully updated project settings to use product bundle identifier 'foo'")


      progress=50
      ENV["MY_RPOGRESS"]="50"
      sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Generating The Development and Distribution Provisioning Profile'" + " " + progress.to_s + " " + myBuildVersion.to_s

       
      # puts "Creating Production Certificates"
      slack_train()


      cert(
            development: 'false',
            username: options[:username],
            platform: options[:platform],
            team_id: options[:devTeamId]
      )

      puts "Creating Production provisioningProfiles"
      slack_train()


      progress=55
      ENV["MY_RPOGRESS"]="55"
      sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Generating The Development and Distribution Provisioning Profile'" + " " + progress.to_s + " " + myBuildVersion.to_s


        sigh(
              platform: options[:platform],
              username: options[:username],
              development: 'false',
              team_id: options[:devTeamId],
              output_path: options[:baseResultPath] + "/fastlane/Certificates",
              filename: options[:appname] + "_production.mobileprovision",
              app_identifier: options[:bundleIdentifier]
        )

        slack_train()


        progress=60
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Invoking and Installing Provisioning Profiles'" + " " + progress.to_s + " " + myBuildVersion.to_s


        get_certificates           # invokes cert
        
        get_provisioning_profile(
            app_identifier: options[:bundleIdentifier]
        )

        slack_train()

        progress=65
        ENV["MY_RPOGRESS"]="65"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Updating the Info List with the Bundle Indentifier'" + " " + progress.to_s + " " + myBuildVersion.to_s


        update_info_plist(
            scheme: options[:scheme],
            display_name: options[:appname],
            app_identifier: options[:bundleIdentifier]
        )
    
        # increment_build_number

        progress=70
        ENV["MY_RPOGRESS"]="70"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Updating the Developer Team Id'" + " " + progress.to_s + " " + myBuildVersion.to_s


        update_project_team(
            teamid: options[:devTeamId]
        )

        slack_train()

        progress=75
        ENV["MY_RPOGRESS"]="75"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Setting the Path of the Provisioning Profile for the Build'" + " " + progress.to_s + " " + myBuildVersion.to_s


        update_project_provisioning(
            profile:"./fastlane/Certificates/"+options[:appname]+"_production.mobileprovision", # optional if you use sigh
            target_filter:"Snagfilms_iOS",
            build_configuration: "Release"
        )

        update_project_provisioning(
            profile:"./fastlane/Certificates/"+options[:appname]+"_production.mobileprovision", # optional if you use sigh
            target_filter:"Snagfilms_iOS",
            build_configuration: "Debug"
        )

        progress=80
        ENV["MY_RPOGRESS"]="80"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Increementing the Build Number of the Build'" + " " + progress.to_s + " " + myBuildVersion.to_s


        increment_build_number_in_plist(
          scheme: "Snagfilms_iOS"
        )

        progress=82
        ENV["MY_RPOGRESS"]="82"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Capturing Screenshots of the Build and Running the Unit Test Cases'" + " " + progress.to_s + " " + myBuildVersion.to_s    
        slack_train()

        begin
            capture_ios_screenshots(scheme: "SnagfilmsUITests",
                     number_of_retries:1,
                     clean: true,
                     clear_previous_screenshots:true,
                     skip_open_summary:false,
                     concurrent_simulators:true,
                     languages:(["en-US"]),
                     devices:(["iPhone 8"])
            )

        rescue => ex
           puts "Screen Shot Errorrs"
           UI.error("Something went wrong: #{ex}")
        end

        puts "Continue"

        begin
           ENV["SLACK_URL"]="https://hooks.slack.com/services/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"
           slack_train()
        rescue => ex
           UI.error("Something went wrong: #{ex}")
        end

        progress=85
        ENV["MY_RPOGRESS"]="85"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Generating the Release build and packaging the Build with Secure Keys'" + " " + progress.to_s + " " + myBuildVersion.to_s


        absoluteApkPath=gym(scheme: "Snagfilms_iOS",
        clean:true,
        output_directory: options[:baseResultPath] +"/builds",
        )  

        myUpdatedBuildNumber = get_build_number_from_plist(
          scheme: "Snagfilms_iOS"
        )

        puts '**************************'
        puts myUpdatedBuildNumber
        puts '**************************'

        myBuildVersion=myUpdatedBuildNumber       

        puts absoluteApkPath

        slack_train()

        progress=90
        ENV["MY_RPOGRESS"]="90"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Build Uploading to the S3 Bucket'" + " " + progress.to_s + " " + myBuildVersion.to_s
        sh "./PostUpdateLink.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Connecting to the Itunes and Uploading the Build'" + " " + progress.to_s + " " + myBuildVersion.to_s + " " + absoluteApkPath.to_s + " " + options[:mySiteId].to_s + " " + options[:myUploadUrl]
        
        progress=92
        ENV["MY_RPOGRESS"]="92"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'SUCCESS_S3_BUCKET'" + " " + "'NO ERROR'" + " " + "'Build Uploading to the S3 Bucket'" + " " + progress.to_s + " " + myBuildVersion.to_s

      
        progress=95
        ENV["MY_RPOGRESS"]="95"


        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Connecting to App Store Uploading the Screenshots and Metadata on App Store and TestFlight.'" + " " + progress.to_s + " " + myBuildVersion.to_s

        
        deliver(username:options[:username], team_id:options[:ituneTeamId], dev_portal_team_id:options[:devTeamId],force: true,skip_binary_upload:"true",app_icon:options[:appIconPath])

        # deliver(username:options[:username], team_id:options[:ituneTeamId], dev_portal_team_id:options[:devTeamId],force: true,skip_binary_upload:"true",app_icon:options[:appIconPath],app_rating_config_path:"./itunes_rating_config.json")

        slack_train()
        
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Connected Successfully to Itunes. Uploading Build to Testflight and Appstore. Takes Time ........'" + " " + progress.to_s + " " + myBuildVersion.to_s

        # sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Connected Successfully to the Itunes and Testflight for Uploading the Build. Uploading the build on TestFlight and Appstore. This will take some time as build is under uploading on  App Store and Testflight'" + " " + progress.to_s + " " + myBuildVersion.to_s

        myslackMessageOne = "SUCCESSFULLY UPLOADED APP METADATA TO APPLE APP STORE. UPLOADING THE IOS BUILD TO APP STORE"
        slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName)
        # slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName,mySlackURL:options[:slackWebHookUrl])

        pilot(
              ipa:absoluteApkPath,
              changelog: "Something that is new here",
              skip_waiting_for_build_processing:"true",
              beta_app_description:"Something that is new here",
              team_id:options[:ituneTeamId]
        )

        myslackMessageOne = "SUCCESSFULLY UPLOADED THE IOS BUILD TO APPLE APP STORE. WAITING FOR BUILD TO PROCESS BY APP STORE. RUNNING WATCH BUILD AND WE WILL NOTIFY YOU ONCE BUILD GETS PROCCESSED "
        slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName)

        # slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName,mySlackURL:options[:slackWebHookUrl])

        progress=99

        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Successfully Uploaded Build to TestFlight and App Store. You will be notified when build is ready to Publish once completely processed by Testflight and Appstore.'" + " " + progress.to_s + " " + myBuildVersion.to_s

        # sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Build is under Review. Successfully Uploaded the Build to App Store and TestFLight. We are running WatchBuild as Build is currently under processing by Appstore. You will be notified once the build gets completely process by Testflight and Appstore and will be ready to publish'" + " " + progress.to_s + " " + myBuildVersion.to_s
       
        sh "./watchBuildShell.sh " + myBuildId + " " + myPostUrl + " '" + options[:bundleIdentifier].to_s + "' " + myBuildVersion.to_s + " " + options[:myItunesUsername].to_s
        # # sh "./watchBuildShell.sh " + '75' + " " + 'http://viewlifttoolsupgrad-qa.us-east-1.elasticbeanstalk.com/snagfilmsdsa/ios/appcms/build/status ' + "com.snagfilms.testtesttest " + '36' + " " + 'piyushaggarwal.incedo@gmail.com'

    end

    desc "Deploy a new version to the App Store"
    # You can define as many lanes as you want

    after_all do |lane, options|
    # This block is called, only if the executed lane was successful
      # sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl] + " APPLICATION_NOT_PROCESSED uploaded " + options[:bundleIdentifier]
      # sh "./WatchBuild.sh ADD "+options[:buildid] + " "+ options[:posturl] + " "+ options[:bundleIdentifier] + " "+ options[:username] + " " + options[:password]
    end

    error do |lane, exception, options|

        progress = 0
        myBuildVersion = 0

        puts "piyush"
        puts "piyush"

        buildFailedLane(my_slack_msg: "BUILD FAILED" ,my_user_name:"Viewlift Build Automation Framework")

        slack_train_crash

        buildFailedLane(my_slack_msg: exception.to_s ,my_user_name:"Viewlift Build Automation Framework")

        errorMessageOne=exception.message
        errorMessageTwo=errorMessageOne.gsub(/\s|"|'/, '')

        begin
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + errorMessageTwo + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        rescue => ex
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + "Build Failed Due to Complation Error." + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        end

        begin
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + errorMessageOne + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        rescue => ex
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + "Build Failed Due to Complation Error." + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        end



        # sh "./PostBuildStatus.sh " +  options[:buildId].to_s + " " + options[:posturl]].to_s + " " + "FAILED_BUILD_ERROR" + " '" + errorMessageOne.to_s  + "' '" + errorMessageOne.to_s + "' " + progress.to_s + " " + myBuildVersion.to_s

        # sh "./PostBuildStatus.sh "+options[:buildid].to_s + " " + options[:posturl].to_s +  " " + "'FAILED_BUILD_ERROR'" + " \"" + errorMessageOne.to_s + "\" " + "'Build Failed'" + " " + progress.to_s  + " false " + myBuildVersion.to_s
        # sh "./PostBuildStatus.sh "+options[:buildid].to_s + " " + options[:posturl].to_s +  " " + "'FAILED_BUILD_ERROR'" + " \"" + errorMessageTwo.to_s + "\" " + "'Build Failed'" + " " + progress.to_s  + " false " + myBuildVersion.to_s

    end

    desc "Send Messages on Slack"
    lane :slackSendMessage do |options|

          ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          # ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          puts options[:my_slack_msg]
          slack(message: options[:my_slack_msg], username: options[:my_user_name], default_payloads: [:test_result], icon_url:"https://s3.amazonaws.com/mysomelogos/635593161616901137-viewliftlogo.jpg")
    end

    desc "Send Failed Messages on Slack"
        lane :buildFailedLane do |options|
          ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          #ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          puts options[:my_slack_msg]
          slack(message: options[:my_slack_msg], username: options[:my_user_name], default_payloads: [:lane],icon_url:"https://s3.amazonaws.com/mysomelogos/635593161616901137-viewliftlogo.jpg")
    end
end


platform :appletvosBuild do
    before_all do |options|
    #    ENV["SLACK_URL"] = "https://viewlift-offshore.slack.com/archives/C6ZANMA6B"
    end

    desc "Runs all the tests"
    lane :test do
    scan
    end

    desc "Deploy a new version to the App Store- with custom"
    lane :appleTvStoreBuild do |options|


        ENV["DELIVER_USER"] = options[:username]
        ENV["DELIVER_PASSWORD"] = options[:password]

        update_info_plist(
            scheme: options[:scheme],
            display_name: options[:appname],
            app_identifier: options[:bundleIdentifier]
        )
        update_app_identifier(
            xcodeproj: "AppCMS.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
            plist_path: options[:scheme] + "/Info.plist", # Path to info plist file, relative to xcodeproj
            app_identifier: options[:bundleIdentifier] # The App Identifier
        )
        update_project_team(
            path: "AppCMS.xcodeproj",
            teamid: options[:devteamid]
        )
        update_project_provisioning(
            xcodeproj: "AppCMS.xcodeproj",
            profile: options[:resultPath] + options[:provisioning_profile_name]+".mobileprovision", # optional if you use sigh
            target_filter:options[:scheme],
            build_configuration: "Release"
        )

        sh "./PostBuildStatus.sh "+options[:buildid] + " " + options[:posturl]+" SCREEN_SHOT_IN_PROGRESS ''"

        begin
            
            snapshot(scheme: options[:scheme] + "UITests", output_directory: options[:resultPath] + "screenshots/",
                    number_of_retries:0, clean: true,
                    clear_previous_screenshots:true,
                    skip_open_summary:true,
                    launch_arguments:(["-TargetBundleIdentifier #{options[:bundleIdentifier]}"]),
                    concurrent_simulators:true,
                    languages:(["en-US"]),
                    devices:(["Apple TV 4K (at 1080p)"])
            )
          
        rescue => ex
           UI.error("Something went wrong: #{ex}")
        end

        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BUILD_INPROGRESS ''"
        
        gym(scheme: options[:scheme], clean: true, output_directory: options[:resultPath] +"build", output_name: options[:appname],
                  build_path:options[:resultPath] +"build",
                  archive_path:options[:resultPath] +"build/"+options[:appname]+".xcarchive",
                  derived_data_path:options[:resultPath] +"DerivedData",
                  export_options: {
                  provisioningProfiles: {
                      options[:bundleIdentifier] => options[:provisioning_profile_name],}
                    })

        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" FOUND_APP ''"
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" METADATA_UPLOAD ''"
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" SCREENSHOT_UPLOAD ''"
        deliver(username:options[:username], team_id:options[:team_id], dev_portal_team_id:options[:devteamid],force: true, metadata_path:options[:resultPath]+"metadata", ipa:options[:resultPath]+ "build/"+options[:appname]+".ipa", screenshots_path:options[:resultPath]+"screenshots")
        #pilot
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BINARY_UPLOADED ''"
    end

    desc "Deploy a new version to the developer with custom"
   
    lane :appleTvbuild do |options|
      

        puts "*************************************************"
        puts options[:appname]
        puts options[:bundleIdentifier]
        puts options[:devTeamId]
        puts options[:buildId]
        puts options[:posturl]
        puts options[:username]
        puts options[:password]
        puts options[:baseResultPath]
        puts options[:scheme]
        puts options[:isAppOnStore]
        puts options[:appVersion]
        puts options[:platform]
        puts options[:ituneTeamId]
        puts options[:appIconPath]
        puts options[:myEmailId]
        puts options[:mySiteId]
        puts options[:myUploadUrl]
        puts options[:slackWebHookUrl]
        puts options[:myItunesUsername]

        puts "*************************************************"

        myBuildId=options[:buildId].to_s
        myPostUrl=options[:posturl].to_s
        mySlackUserName="Viewlift APPLE TV Build Automation Framework"

        puts myBuildId
        puts myPostUrl 

        ENV["DELIVER_USER"] = options[:username]
        ENV["DELIVER_PASSWORD"] = options[:password]

        slack_train_start(distance: 12)

        myslackMessageOne = options[:appname].to_s + " APPLE TV BUILD LANE STARTED. BUILD-ID --> " + options[:buildId].to_s + ". APP-VERSION-NUMBER --> " + options[:appVersion].to_s + ". BUILD TRIGGERED BY -->" +  options[:myEmailId].to_s
        slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName)
        # slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName,mySlackURL:options[:slackWebHookUrl])

        slack_train()

        progress=48
        ENV["MY_RPOGRESS"]="48"

        slack_train()


        myBuildVersion=0
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Cleaning the Project'" + " " + "48" + " " + "0"


      slack_train()


      ##Updating the Product Bundle Identifer.     
      puts options[:bundleIdentifier].to_s
      myBundleIdentifierValue="PRODUCT_BUNDLE_IDENTIFIER = "+ options[:bundleIdentifier].to_s + ";"
      path = "/Users/fastlane/Desktop/fastlane-qa/ios/AppCMS/AppCMS.xcodeproj/project.pbxproj"
      UI.message("Updating product bundle identifier (foo) for the given project '#{path}'")
      p = File.read(path)
      p.gsub!(/PRODUCT_BUNDLE_IDENTIFIER = .*;/, myBundleIdentifierValue)
      File.write(path, p)
      UI.success("Successfully updated project settings to use product bundle identifier 'foo'")


      progress=50
      ENV["MY_RPOGRESS"]="50"
      sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Generating The Development and Distribution Provisioning Profile'" + " " + progress.to_s + " " + myBuildVersion.to_s

       
      # puts "Creating Production Certificates"
      slack_train()


      cert(
            development: 'false',
            username: options[:username],
            team_id: options[:devTeamId]
      )

      puts "Creating Production provisioningProfiles"
      slack_train()


      progress=55
      ENV["MY_RPOGRESS"]="55"
      sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Generating The Development and Distribution Provisioning Profile'" + " " + progress.to_s + " " + myBuildVersion.to_s


        sigh(
              platform: "tvos",
              username: options[:username],
              development: 'false',
              team_id: options[:devTeamId],
              output_path: options[:baseResultPath] + "/fastlane/Certificates",
              filename: options[:appname] + "_production.mobileprovision",
              app_identifier: options[:bundleIdentifier]
        )

        slack_train()


        progress=60
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Invoking and Installing Provisioning Profiles'" + " " + progress.to_s + " " + myBuildVersion.to_s


        get_certificates           # invokes cert
        
        get_provisioning_profile(
            app_identifier: options[:bundleIdentifier],
            platform: "tvos"
        )

        slack_train()

        progress=65
        ENV["MY_RPOGRESS"]="65"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Updating the Info List with the Bundle Indentifier'" + " " + progress.to_s + " " + myBuildVersion.to_s


        update_info_plist(
            scheme: options[:scheme],
            display_name: options[:appname],
            app_identifier: options[:bundleIdentifier]
        )
    
        # increment_build_number

        progress=70
        ENV["MY_RPOGRESS"]="70"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Updating the Developer Team Id'" + " " + progress.to_s + " " + myBuildVersion.to_s


        update_project_team(
            teamid: options[:devTeamId]
        )

        slack_train()

        progress=75
        ENV["MY_RPOGRESS"]="75"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Setting the Path of the Provisioning Profile for the Build'" + " " + progress.to_s + " " + myBuildVersion.to_s


        update_project_provisioning(
            profile:"./fastlane/Certificates/"+options[:appname]+"_production.mobileprovision", # optional if you use sigh
            target_filter:"AppCMS_tvOS",
            build_configuration: "Release"
        )

        update_project_provisioning(
            profile:"./fastlane/Certificates/"+options[:appname]+"_production.mobileprovision", # optional if you use sigh
            target_filter:"AppCMS_tvOS",
            build_configuration: "Debug"
        )

        progress=80
        ENV["MY_RPOGRESS"]="80"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Increementing the Build Number of the Build'" + " " + progress.to_s + " " + myBuildVersion.to_s


        increment_build_number_in_plist(
          scheme: "AppCMS_tvOS"
        )

        progress=82
        ENV["MY_RPOGRESS"]="82"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Capturing Screenshots of the Build and Running the Unit Test Cases'" + " " + progress.to_s + " " + myBuildVersion.to_s    
        slack_train()

        begin
            capture_ios_screenshots(scheme: "AppCMS_tvOSUITests",
                     number_of_retries:1,
                     clean: true,
                     clear_previous_screenshots:true,
                     skip_open_summary:false,
                     concurrent_simulators:true,
                     languages:(["en-US"]),
                     devices:(["Apple TV"])
            )

        rescue => ex
           puts "Screen Shot Errorrs"
           UI.error("Something went wrong: #{ex}")
        end

        puts "Continue"

        begin
           ENV["SLACK_URL"]="https://hooks.slack.com/services/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"
           slack_train()
        rescue => ex
           UI.error("Something went wrong: #{ex}")
        end

        progress=85
        ENV["MY_RPOGRESS"]="85"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Generating the Release build and packaging the Build with Secure Keys'" + " " + progress.to_s + " " + myBuildVersion.to_s


        absoluteApkPath = gym(scheme: "AppCMS_tvOS", 
            clean: true,  
            output_directory: options[:baseResultPath] +"/builds",
        )  

        myUpdatedBuildNumber = get_build_number_from_plist(
          scheme: "AppCMS_tvOS"
        )

        puts '**************************'
        puts myUpdatedBuildNumber
        puts '**************************'

        myBuildVersion=myUpdatedBuildNumber       

        puts "---------------------------------- ABSOLUTE APK PATH ----------------------------------------------"
        puts absoluteApkPath
        puts "---------------------------------- ABSOLUTE APK PATH ----------------------------------------------"


        slack_train()


        progress=90
        ENV["MY_RPOGRESS"]="90"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Build Uploading to the S3 Bucket'" + " " + progress.to_s + " " + myBuildVersion.to_s
        sh "./postUpdateAppleTvLink.sh " + myBuildId + " " + myPostUrl + " " + "'BUILD_PROGRESS'" + " " + "'NO ERROR'" + " " + "'Connecting to the Itunes and Uploading the Build'" + " " + progress.to_s + " " + myBuildVersion.to_s + " " + absoluteApkPath.to_s + " " + options[:mySiteId].to_s + " " + options[:myUploadUrl]
        
        progress=92
        ENV["MY_RPOGRESS"]="92"
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'SUCCESS_S3_BUCKET'" + " " + "'NO ERROR'" + " " + "'Build Uploading to the S3 Bucket'" + " " + progress.to_s + " " + myBuildVersion.to_s

      
        progress=95
        ENV["MY_RPOGRESS"]="95"


        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Connecting to App Store Uploading the Screenshots and Metadata on App Store and TestFlight.'" + " " + progress.to_s + " " + myBuildVersion.to_s

        
        deliver(username:options[:username], team_id:options[:ituneTeamId], dev_portal_team_id:options[:devTeamId],force: true,skip_binary_upload:"true",app_icon:options[:appIconPath],platform: "appletvos",force:"true",skip_screenshots:"true")

        # deliver(username:options[:username], team_id:options[:ituneTeamId], dev_portal_team_id:options[:devTeamId],force: true,skip_binary_upload:"true",app_icon:options[:appIconPath],app_rating_config_path:"./itunes_rating_config.json")

        slack_train()
        
        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Connected Successfully to Itunes. Uploading Build to Testflight and Appstore. Takes Time ........'" + " " + progress.to_s + " " + myBuildVersion.to_s

        myslackMessageOne = "SUCCESSFULLY UPLOADED APP METADATA TO APPLE APP STORE. UPLOADING THE IOS BUILD TO APP STORE"
        slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName)
        # slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName,mySlackURL:options[:slackWebHookUrl])

        pilot(
              ipa:absoluteApkPath,
              changelog: "Something that is new here",
              skip_waiting_for_build_processing:"true",
              beta_app_description:"Something that is new here",
              team_id:options[:ituneTeamId],
              app_platform: "appletvos",
              email:"testsnag.sri@gmail.com"
        )

        myslackMessageOne = "SUCCESSFULLY UPLOADED THE IOS BUILD TO APPLE APP STORE. WAITING FOR BUILD TO PROCESS BY APP STORE. RUNNING WATCH BUILD AND WE WILL NOTIFY YOU ONCE BUILD GETS PROCCESSED "
        slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName)

        # slackSendMessage(my_slack_msg:myslackMessageOne,my_user_name:mySlackUserName,mySlackURL:options[:slackWebHookUrl])

        progress=99

        sh "./PostBuildStatus.sh " + myBuildId + " " + myPostUrl + " " + "'UPLOADING_PLAY_STORE'" + " " + "'NO ERROR'" + " " + "'Successfully Uploaded Build to TestFlight and App Store. You will be notified when build is ready to Publish once completely processed by Testflight and Appstore.'" + " " + progress.to_s + " " + myBuildVersion.to_s
       
        sh "./watchBuildShell.sh " + myBuildId + " " + myPostUrl + " '" + options[:bundleIdentifier].to_s + "' " + myBuildVersion.to_s + " " + options[:myItunesUsername].to_s

    end

    desc "Deploy a new version to the App Store"
    # You can define as many lanes as you want

    after_all do |lane, options|
      # # This block is called, only if the executed lane was successful
      # sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl] + " APPLICATION_NOT_PROCESSED uploaded " + options[:bundleIdentifier]
      # sh "./WatchBuild.sh ADD "+options[:buildid] + " "+ options[:posturl] + " "+ options[:bundleIdentifier] + " "+ options[:username] + " " + options[:password]
    end

    desc "Send Messages on Slack"
    lane :slackSendMessage do |options|

          ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          # ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          puts options[:my_slack_msg]
          slack(message: options[:my_slack_msg], username: options[:my_user_name], default_payloads: [:test_result], icon_url:"https://s3.amazonaws.com/mysomelogos/635593161616901137-viewliftlogo.jpg")
    end

    desc "Send Failed Messages on Slack"
        lane :buildFailedLane do |options|
          ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          #ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
          puts options[:my_slack_msg]
          slack(message: options[:my_slack_msg], username: options[:my_user_name], default_payloads: [:lane],icon_url:"https://s3.amazonaws.com/mysomelogos/635593161616901137-viewliftlogo.jpg")
    end


    desc "Send Failed Messages on Slack"
    error do |lane, exception, options|

        progress = 0
        myBuildVersion = 0

        puts "piyush"
        puts "piyush"

        buildFailedLane(my_slack_msg: "BUILD FAILED" ,my_user_name:"Viewlift Build Automation Framework")

        slack_train_crash

        buildFailedLane(my_slack_msg: exception.to_s ,my_user_name:"Viewlift Build Automation Framework")

        errorMessageOne=exception.message
        errorMessageTwo=errorMessageOne.gsub(/\s|"|'/, '')

        begin
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + errorMessageTwo + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        rescue => ex
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + "Build Failed Due to Complation Error." + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        end

        begin
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + errorMessageOne + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        rescue => ex
           sh "./PostBuildStatus.sh " + options[:buildId].to_s + " " + options[:posturl].to_s + " " + "'FAILED_BUILD_ERROR'" + " '" + "Build Failed Due to Complation Error." + "' " + "'BUILD FAILED'" + " " + progress.to_s + " " + myBuildVersion.to_s
        end



        # sh "./PostBuildStatus.sh " +  options[:buildId].to_s + " " + options[:posturl]].to_s + " " + "FAILED_BUILD_ERROR" + " '" + errorMessageOne.to_s  + "' '" + errorMessageOne.to_s + "' " + progress.to_s + " " + myBuildVersion.to_s

        # sh "./PostBuildStatus.sh "+options[:buildid].to_s + " " + options[:posturl].to_s +  " " + "'FAILED_BUILD_ERROR'" + " \"" + errorMessageOne.to_s + "\" " + "'Build Failed'" + " " + progress.to_s  + " false " + myBuildVersion.to_s
        # sh "./PostBuildStatus.sh "+options[:buildid].to_s + " " + options[:posturl].to_s +  " " + "'FAILED_BUILD_ERROR'" + " \"" + errorMessageTwo.to_s + "\" " + "'Build Failed'" + " " + progress.to_s  + " false " + myBuildVersion.to_s

    end
end
