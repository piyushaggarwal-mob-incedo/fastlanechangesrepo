
# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.41.0"

default_platform :ios

platform :ios do

    before_all do |options|
    #    ENV["SLACK_URL"] = "https://viewlift-offshore.slack.com/archives/C6ZANMA6B"
    end

    desc "Runs all the tests"
    lane :test do
    scan
    end

    desc "Deploy a new version to the App Store- with custom"

    lane :appcmsCreateBuild do |options|

        ENV["DELIVER_USER"] = options[:username]
        ENV["DELIVER_PASSWORD"] = options[:password]

        produce(
            app_name: 'YOUR_UNIQUE_APP_NAME',
            language: 'English',
            app_version: '1.0',
            sku: '123abc'
        )

        cert(
            development: 'false',
            username: options[:itunesUserName],
            platform: options[:platform]
        )


        cert(
            development: 'true',
            username: options[:itunesUserName],
        )

        sigh(
              force: true,
              platform: options[:platform],
              username: options[:itunesUserName],
              development: 'true',
              team_id: options[:devTeamId],
              output_path: options[:baseResultPath]
        )



        increment_build_number(
          xcodeproj: "./path/to/MyApp.xcodeproj" # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)
        )

        update_info_plist(
            scheme: options[:scheme],
            display_name: options[:appname],
            app_identifier: options[:bundleIdentifier]
        )

        update_app_identifier(
            xcodeproj: "AppCMS.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
            plist_path: options[:scheme] + "/Info.plist", # Path to info plist file, relative to xcodeproj
            app_identifier: options[:bundleIdentifier] # The App Identifier
        )

        update_project_team(
            path: "AppCMS.xcodeproj",
            teamid: options[:devteamid]
        )

        update_project_provisioning(
            xcodeproj: "AppCMS.xcodeproj",
            profile: options[:resultPath] + options[:provisioning_profile_name]+".mobileprovision", # optional if you use sigh
            target_filter:options[:scheme],
            build_configuration: "Release"
        )


        update_project_provisioning(
            xcodeproj: "AppCMS.xcodeproj",
            profile: options[:resultPath] + options[:provisioning_profile_name]+".mobileprovision", # optional if you use sigh
            target_filter:options[:scheme],
            build_configuration: "Release"
        )

        sh "./PostBuildStatus.sh "+options[:buildid] + " " + options[:posturl]+" SCREEN_SHOT_IN_PROGRESS ''"

        begin
            if options[:scheme] == "AppCMS"
                snapshot(scheme: options[:scheme] + "UITests", output_directory: options[:resultPath] + "screenshots/",
                           number_of_retries:0, clean: true,
                           clear_previous_screenshots:true,
                           skip_open_summary:true,
                           launch_arguments:(["-TargetBundleIdentifier #{options[:bundleIdentifier]}"]),
                           concurrent_simulators:false,
                           languages:(["en-US"]),
                           devices:(["iPhone 8 Plus", "iPhone 8"])
                           )
            else
                snapshot(scheme: options[:scheme] + "UITests", output_directory: options[:resultPath] + "screenshots/",
                            number_of_retries:0, clean: true,
                            clear_previous_screenshots:true,
                            skip_open_summary:true,
                            launch_arguments:(["-TargetBundleIdentifier #{options[:bundleIdentifier]}"]),
                            concurrent_simulators:true,
                            languages:(["en-US"]),
                            devices:(["Apple TV 4K (at 1080p)"])
                            )
            end
        rescue => ex
           UI.error("Something went wrong: #{ex}")
        end

        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BUILD_INPROGRESS ''"
        
        gym(scheme: options[:scheme], clean: true, output_directory: options[:resultPath] +"build", output_name: options[:appname],
                  build_path:options[:resultPath] +"build",
                  archive_path:options[:resultPath] +"build/"+options[:appname]+".xcarchive",
                  derived_data_path:options[:resultPath] +"DerivedData",
                  export_options: {
                  provisioningProfiles: {
                      options[:bundleIdentifier] => options[:provisioning_profile_name],}
                    })

        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" FOUND_APP ''"
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" METADATA_UPLOAD ''"
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" SCREENSHOT_UPLOAD ''"
        # deliver(username:options[:username], team_id:options[:team_id], dev_portal_team_id:options[:devteamid],force: true, metadata_path:options[:resultPath]+"metadata", ipa:options[:resultPath]+ "build/"+options[:appname]+".ipa", screenshots_path:options[:resultPath]+"screenshots")
        #pilot
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BINARY_UPLOADED ''"
    end

    desc "Deploy a new version to the App Store"
    # You can define as many lanes as you want

    after_all do |lane, options|
    # This block is called, only if the executed lane was successful
      sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl] + " APPLICATION_NOT_PROCESSED uploaded " + options[:bundleIdentifier]
      # sh "./WatchBuild.sh ADD "+options[:buildid] + " "+ options[:posturl] + " "+ options[:bundleIdentifier] + " "+ options[:username] + " " + options[:password]
    end

    error do |lane, exception, options|
    sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" FAILED \""+ exception.to_s + "\""
    end


    desc "Deploy a new version to the developer with custom"
    lane :updateBuild do |options|
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BUILD_INPROGRESS ''"

        update_info_plist(
            scheme: options[:scheme],
            display_name: options[:appname],
            app_identifier: options[:bundleIdentifier]
        )

        update_app_identifier(
            xcodeproj: "AppCMS.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
            plist_path: options[:scheme] + "/Info.plist", # Path to info plist file, relative to xcodeproj
            app_identifier: options[:bundleIdentifier] # The App Identifier
        )
        update_project_team(
            path: "AppCMS.xcodeproj",
            teamid: options[:devteamid]
        )
        
        gym(scheme: options[:scheme], clean: true, output_directory: options[:resultPath] +"build", output_name: options[:appname],
                   build_path:options[:resultPath] +"build",
                   archive_path:options[:resultPath] +"build/"+options[:appname]+".xcarchive",
                   derived_data_path:options[:resultPath] +"DerivedData",
                   export_method:"development",
                   export_options: {compileBitcode: false,
                   provisioningProfiles: {
                       options[:bundleIdentifier] => options[:provisioning_profile_name],}
                     })
    end

end


platform :appletvos do
    before_all do |options|
    #    ENV["SLACK_URL"] = "https://viewlift-offshore.slack.com/archives/C6ZANMA6B"
    end

    desc "Runs all the tests"
    lane :test do
    scan
    end

    desc "Deploy a new version to the App Store- with custom"
    lane :appcmsbuild do |options|
        ENV["DELIVER_USER"] = options[:username]
        ENV["DELIVER_PASSWORD"] = options[:password]

        update_info_plist(
            scheme: options[:scheme],
            display_name: options[:appname],
            app_identifier: options[:bundleIdentifier]
        )
        update_app_identifier(
            xcodeproj: "AppCMS.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
            plist_path: options[:scheme] + "/Info.plist", # Path to info plist file, relative to xcodeproj
            app_identifier: options[:bundleIdentifier] # The App Identifier
        )
        update_project_team(
            path: "AppCMS.xcodeproj",
            teamid: options[:devteamid]
        )
        update_project_provisioning(
            xcodeproj: "AppCMS.xcodeproj",
            profile: options[:resultPath] + options[:provisioning_profile_name]+".mobileprovision", # optional if you use sigh
            target_filter:options[:scheme],
            build_configuration: "Release"
        )

        sh "./PostBuildStatus.sh "+options[:buildid] + " " + options[:posturl]+" SCREEN_SHOT_IN_PROGRESS ''"

        begin
            if options[:scheme] == "AppCMS"
                snapshot(scheme: options[:scheme] + "UITests", output_directory: options[:resultPath] + "screenshots/",
                           number_of_retries:0, clean: true,
                           clear_previous_screenshots:true,
                           skip_open_summary:true,
                           launch_arguments:(["-TargetBundleIdentifier #{options[:bundleIdentifier]}"]),
                           concurrent_simulators:false,
                           languages:(["en-US"]),
                           devices:(["iPhone 8 Plus"])
                           )
            else
                snapshot(scheme: options[:scheme] + "UITests", output_directory: options[:resultPath] + "screenshots/",
                            number_of_retries:0, clean: true,
                            clear_previous_screenshots:true,
                            skip_open_summary:true,
                            launch_arguments:(["-TargetBundleIdentifier #{options[:bundleIdentifier]}"]),
                            concurrent_simulators:true,
                            languages:(["en-US"]),
                            devices:(["Apple TV 4K (at 1080p)"])
                            )
            end
        rescue => ex
           UI.error("Something went wrong: #{ex}")
        end

        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BUILD_INPROGRESS ''"
        gym(scheme: options[:scheme], clean: true, output_directory: options[:resultPath] +"build", output_name: options[:appname],
                  build_path:options[:resultPath] +"build",
                  archive_path:options[:resultPath] +"build/"+options[:appname]+".xcarchive",
                  derived_data_path:options[:resultPath] +"DerivedData",
                  export_options: {
                  provisioningProfiles: {
                      options[:bundleIdentifier] => options[:provisioning_profile_name],}
                    })

        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" FOUND_APP ''"
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" METADATA_UPLOAD ''"
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" SCREENSHOT_UPLOAD ''"
        deliver(username:options[:username], team_id:options[:team_id], dev_portal_team_id:options[:devteamid],force: true, metadata_path:options[:resultPath]+"metadata", ipa:options[:resultPath]+ "build/"+options[:appname]+".ipa", screenshots_path:options[:resultPath]+"screenshots")
        #pilot
        sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BINARY_UPLOADED ''"
    end

    desc "Deploy a new version to the App Store"
    # You can define as many lanes as you want

    after_all do |lane, options|
    # This block is called, only if the executed lane was successful
    sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl] + " APPLICATION_NOT_PROCESSED uploaded " + options[:bundleIdentifier]
    sh "./WatchBuild.sh ADD "+options[:buildid] + " "+ options[:posturl] + " "+ options[:bundleIdentifier] + " "+ options[:username] + " " + options[:password]
    end

    error do |lane, exception, options|
    sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" FAILED \""+ exception.to_s + "\""
    end


    desc "Deploy a new version to the developer with custom"
    lane :developmentbuild do |options|
    sh "./PostBuildStatus.sh "+options[:buildid] + " "+options[:posturl]+" BUILD_INPROGRESS ''"
    update_info_plist(
        scheme: options[:scheme],
        display_name: options[:appname],
        app_identifier: options[:bundleIdentifier]
    )
    update_app_identifier(
        xcodeproj: "AppCMS.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
        plist_path: options[:scheme] + "/Info.plist", # Path to info plist file, relative to xcodeproj
        app_identifier: options[:bundleIdentifier] # The App Identifier
    )
    update_project_team(
        path: "AppCMS.xcodeproj",
        teamid: options[:devteamid]
    )
    
    gym(scheme: options[:scheme], clean: true, output_directory: options[:resultPath] +"build", output_name: options[:appname],
               build_path:options[:resultPath] +"build",
               archive_path:options[:resultPath] +"build/"+options[:appname]+".xcarchive",
               derived_data_path:options[:resultPath] +"DerivedData",
               export_method:"development",
               export_options: {compileBitcode: false,
               provisioningProfiles: {
                   options[:bundleIdentifier] => options[:provisioning_profile_name],}
                 })
    end
end
