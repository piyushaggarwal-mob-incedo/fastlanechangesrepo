{
  "project_info": {
    "project_number": "66550532779",
    "firebase_url": "https://ga-app-cms-firebase.firebaseio.com",
    "project_id": "ga-app-cms-firebase",
    "storage_bucket": "ga-app-cms-firebase.appspot.com"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:66550532779:android:a964804272a3feaf",
        "android_client_info": {
          "package_name": "com.appcmsvl.android"
        }
      },
      "oauth_client": [
        {
          "client_id": "66550532779-us8suu2oi5hs3elmjdrd767bd5v604mr.apps.googleusercontent.com",
          "client_type": 3
        }
      ],
      "api_key": [
        {
          "current_key": "AIzaSyBTVCJvNpCURX5X-tTbC3MYpPuUDSSelE4"
        }
      ],
      "services": {
        "analytics_service": {
          "status": 1
        },
        "appinvite_service": {
          "status": 1,
          "other_platform_oauth_client": []
        },
        "ads_service": {
          "status": 2
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:66550532779:android:47ef18d279334d99",
        "android_client_info": {
          "package_name": "com.viewlift.hoichoi"
        }
      },
      "oauth_client": [
        {
          "client_id": "66550532779-us8suu2oi5hs3elmjdrd767bd5v604mr.apps.googleusercontent.com",
          "client_type": 3
        }
      ],
      "api_key": [
        {
          "current_key": "AIzaSyBTVCJvNpCURX5X-tTbC3MYpPuUDSSelE4"
        }
      ],
      "services": {
        "analytics_service": {
          "status": 1
        },
        "appinvite_service": {
          "status": 1,
          "other_platform_oauth_client": []
        },
        "ads_service": {
          "status": 2
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:66550532779:android:47ef18d279334d99",
        "android_client_info": {
          "package_name": "com.mse.viewlift"
        }
      },
      "oauth_client": [
        {
          "client_id": "66550532779-us8suu2oi5hs3elmjdrd767bd5v604mr.apps.googleusercontent.com",
          "client_type": 3
        }
      ],
      "api_key": [
        {
          "current_key": "AIzaSyBTVCJvNpCURX5X-tTbC3MYpPuUDSSelE4"
        }
      ],
      "services": {
        "analytics_service": {
          "status": 1
        },
        "appinvite_service": {
          "status": 1,
          "other_platform_oauth_client": []
        },
        "ads_service": {
          "status": 2
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:66550532779:android:47ef18d279334d99",
        "android_client_info": {
          "package_name": "com.viewlift.monumental"
        }
      },
      "oauth_client": [
        {
          "client_id": "66550532779-us8suu2oi5hs3elmjdrd767bd5v604mr.apps.googleusercontent.com",
          "client_type": 3
        }
      ],
      "api_key": [
        {
          "current_key": "AIzaSyBTVCJvNpCURX5X-tTbC3MYpPuUDSSelE4"
        }
      ],
      "services": {
        "analytics_service": {
          "status": 1
        },
        "appinvite_service": {
          "status": 1,
          "other_platform_oauth_client": []
        },
        "ads_service": {
          "status": 2
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:66550532779:android:47ef18d279334d99",
        "android_client_info": {
          "package_name": "com.afl.arenafootballleagu"
        }
      },
      "oauth_client": [
        {
          "client_id": "66550532779-us8suu2oi5hs3elmjdrd767bd5v604mr.apps.googleusercontent.com",
          "client_type": 3
        }
      ],
      "api_key": [
        {
          "current_key": "AIzaSyBTVCJvNpCURX5X-tTbC3MYpPuUDSSelE4"
        }
      ],
      "services": {
        "analytics_service": {
          "status": 1
        },
        "appinvite_service": {
          "status": 1,
          "other_platform_oauth_client": []
        },
        "ads_service": {
          "status": 2
        }
      }
    }
  ],
  "configuration_version": "1"
}